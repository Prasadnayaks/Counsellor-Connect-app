import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:lottie/lottie.dart';

void main() {
  SystemChrome.setSystemUIOverlayStyle(
    const SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      statusBarIconBrightness: Brightness.dark,
    ),
  );
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primaryColor: const Color(0xFF6B5DD3),
        scaffoldBackgroundColor: const Color(0xFFE5E9F0),
      ),
      home: const HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _contentSlideAnimation;
  late Animation<double> _menuScaleAnimation;
  bool _isMenuOpen = false;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );

    _contentSlideAnimation = Tween<double>(begin: 0.0, end: -200.0).animate(
      CurvedAnimation(parent: _controller, curve: Curves.easeInOut),
    );

    _menuScaleAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _controller, curve: Curves.easeOutBack),
    );
  }

  void _toggleMenu() {
    setState(() {
      _isMenuOpen = !_isMenuOpen;
      if (_isMenuOpen) {
        _controller.forward();
      } else {
        _controller.reverse();
      }
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Main Content Card (Animated Slide Up)
          AnimatedBuilder(
            animation: _controller,
            builder: (context, child) {
              return Transform.translate(
                offset: Offset(0, _contentSlideAnimation.value),
                child: Opacity(
                  opacity: 1.0 - _controller.value,
                  child: _buildMainContentCard(),
                ),
              );
            },
          ),

          // Bottom Navigation Bar
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: _buildBottomNavigationBar(),
          ),

          // Add Button
          Positioned(
            bottom: 10,
            left: 173,
            child: _buildAddButton(),
          ),

          // Menu
          MenuWidget(
            isOpen: _isMenuOpen,
            onClose: _toggleMenu,
          ),
        ],
      ),
    );
  }

  Widget _buildMainContentCard() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Stack(
            clipBehavior: Clip.none,
            children: [
              Container(
                padding: const EdgeInsets.all(64),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(32),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.05),
                      blurRadius: 10,
                      offset: const Offset(0, 5),
                    ),
                  ],
                ),
                child: Column(
                  children: [
                    const SizedBox(height: 32),
                    Text(
                      "I'll help you navigate the ups and downs in life",
                      style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                        color: const Color(0xFF2D3648),
                        fontWeight: FontWeight.w600,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 24),
                    Text(
                      "Mood check-ins allow you to track what you're doing and how you're feeling throughout the day.",
                      style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                        color: const Color(0xFF374151),
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 16),
                    Text(
                      'Click the add button below and select "Mood check-in". Then we can try it out together!',
                      style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                        color: const Color(0xFF374151),
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
              Positioned(
                top: -86,
                left: 0,
                right: 0,
                child: Center(child: _buildRobotAvatar()),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildRobotAvatar() {
    return SizedBox(
      width: 180,
      height: 180,
      child: Lottie.asset(
        'assets/animation.json',
        fit: BoxFit.contain,
      ),
    );
  }

  Widget _buildBottomNavigationBar() {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 8),
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.only(
          topLeft: Radius.circular(33),
          topRight: Radius.circular(33),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          _buildNavigationBarItem(Icons.wb_sunny_outlined, 'Sun icon'),
          _buildNavigationBarItem(Icons.format_quote_outlined, 'Quote icon'),
          const SizedBox(width: 50),
          _buildNavigationBarItem(Icons.show_chart, 'Chart icon'),
          _buildNavigationBarItem(Icons.description_outlined, 'Description icon'),
        ],
      ),
    );
  }

  Widget _buildNavigationBarItem(IconData icon, String label) {
    return Semantics(
      label: label,
      child: SizedBox(
        width: 48,
        height: 48,
        child: IconButton(
          icon: Icon(icon, color: Colors.grey),
          onPressed: () {},
        ),
      ),
    );
  }

  Widget _buildAddButton() {
    return Semantics(
      label: 'Add menu button',
      child: GestureDetector(
        onTap: _toggleMenu,
        child: Container(
          width: 66,
          height: 66,
          decoration: BoxDecoration(
            color: const Color(0xFF9575CD),
            borderRadius: BorderRadius.circular(26),
          ),
          child: AnimatedRotation(
            duration: const Duration(milliseconds: 300),
            turns: _isMenuOpen ? 0.125 : 0,
            child: const Icon(Icons.add, color: Colors.white, size: 32),
          ),
        ),
      ),
    );
  }
}

class CustomMenuClipper extends CustomClipper<Path> {
  @override
  Path getClip(Size size) {
    final path = Path();
    final arrowWidth = 40.0;
    final arrowHeight = 15.0;
    final cornerRadius = 20.0;

    path.moveTo(size.width / 2, size.height);
    path.lineTo((size.width / 2) - arrowWidth, size.height - arrowHeight);
    path.lineTo(cornerRadius, size.height - arrowHeight);
    path.quadraticBezierTo(
      0,
      size.height - arrowHeight,
      0,
      size.height - arrowHeight - cornerRadius,
    );
    path.lineTo(0, cornerRadius);
    path.quadraticBezierTo(0, 0, cornerRadius, 0);
    path.lineTo(size.width - cornerRadius, 0);
    path.quadraticBezierTo(size.width, 0, size.width, cornerRadius);
    path.lineTo(size.width, size.height - arrowHeight - cornerRadius);
    path.quadraticBezierTo(
      size.width,
      size.height - arrowHeight,
      size.width - cornerRadius,
      size.height - arrowHeight,
    );
    path.lineTo((size.width / 2) + arrowWidth, size.height - arrowHeight);
    path.close();

    return path;
  }

  @override
  bool shouldReclip(CustomClipper<Path> oldClipper) => true;
}

class MenuWidget extends StatelessWidget {
  final bool isOpen;
  final VoidCallback onClose;

  const MenuWidget({
    Key? key,
    required this.isOpen,
    required this.onClose,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return AnimatedPositioned(
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeOutBack,
      bottom: isOpen ? 50
          : -200,
      left: 0,
      right: 0,
      child: Center(
        child: ClipPath(
          clipper: CustomMenuClipper(),
          child: Container(
            width: 200,
            padding: const EdgeInsets.fromLTRB(20, 20, 20, 35),
            decoration: BoxDecoration(
              color: const Color(0xFF9575CD),
              boxShadow: [
                BoxShadow(
                  color: const Color(0xFF6B5DD3).withOpacity(0.3),
                  blurRadius: 15,
                  offset: const Offset(0, 5),
                ),
              ],
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                _buildMenuItem('Mood check-in', Icons.mood, false),
                const SizedBox(height: 16),
                _buildMenuItem('Voice note', Icons.mic, true),
                const SizedBox(height: 16),
                _buildMenuItem('Add photo', Icons.photo_camera, true),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildMenuItem(String title, IconData icon, bool disabled) {
    return Opacity(
      opacity: disabled ? 0.5 : 1.0,
      child: Row(
        children: [
          Icon(icon, color: Colors.white, size: 20),
          const SizedBox(width: 22),
          Text(
            title,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }
}